<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Commands (CLI) on Terraform Workshop</title>
    <link>/terraform-workshop/basics/terraform/commands/</link>
    <description>Recent content in Commands (CLI) on Terraform Workshop</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-KR</language>
    
	<atom:link href="/terraform-workshop/basics/terraform/commands/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>apply</title>
      <link>/terraform-workshop/basics/terraform/commands/apply/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/terraform-workshop/basics/terraform/commands/apply/</guid>
      <description>terraform apply 명령은 원하는 구성 상태에 도달하는 데 필요한 변경 사항 또는 terraform plan 실행 계획에 의해 생성 된 사전 결정된 조치 세트를 적용하는 데 사용됩니다.
Usage terraform apply [options] [dir-or-plan] 기본적으로 apply는 구성에 대한 현재 디렉토리를 스캔하고 변경 사항을 적절하게 적용합니다.
주요 옵션:
-input=true - 직접 설정되지 않은 경우 변수 입력을 요청합니다.
-auto-approve - 신청하기 전에 대화식 계획 승인을 건너 뜁니다.
-var &#39;foo=bar&#39; - Terraform 구성에서 변수를 설정합니다. 이 플래그는 여러번 설정할 수 있습니다.</description>
    </item>
    
    <item>
      <title>destroy</title>
      <link>/terraform-workshop/basics/terraform/commands/destroy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/terraform-workshop/basics/terraform/commands/destroy/</guid>
      <description>terraform destroy 명령은 Terraform 관리 인프라를 삭제하는 데 사용됩니다.
Usage terraform destroy [options] [dir] Terraform에서 관리하는 인프라가 파괴됩니다. 파괴하기 전에 확인을 요청합니다.
이 명령은 계획 파일 인수를 제외하고 apply 명령이 수락하는 모든 인수 및 플래그를 승인합니다.
-auto-approve가 설정되면 삭제 확인이 표시되지 않습니다.
&amp;ldquo;종속성&amp;quot;에 영향을주는 대신 -target 플래그는 지정된 대상에 의존하는 모든 자원도 삭제합니다. 자세한 내용은 terraform plan 의 target 문서를 참조하십시오.
terraform destroy 명령의 동작은 terraform plan -destroy 명령으로 언제든지 미리 볼 수 있습니다.</description>
    </item>
    
    <item>
      <title>fmt</title>
      <link>/terraform-workshop/basics/terraform/commands/fmt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/terraform-workshop/basics/terraform/commands/fmt/</guid>
      <description>terraform fmt 명령은 Terraform 구성 파일을 표준 형식 및 스타일로 다시 쓰는 데 사용됩니다. 이 명령은 Terraform 언어 스타일 규칙의 하위 집합과 함께 가독성을 위한 기타 작은 조정 사항을 적용합니다.
Usage terraform fmt [options] [DIR] </description>
    </item>
    
    <item>
      <title>graph</title>
      <link>/terraform-workshop/basics/terraform/commands/graph/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/terraform-workshop/basics/terraform/commands/graph/</guid>
      <description>terraform graph 명령은 구성 또는 실행 계획의 시각적 표현을 생성하는 데 사용됩니다. 출력은 DOT 형식이며, GraphViz에서 차트를 생성하는 데 사용할 수 있습니다.
Usage terraform graph [options] [DIR] Terraform 리소스의 시각적 종속성 그래프를 출력합니다.
그래프는 DOT 형식으로 출력됩니다. 이 형식을 읽을 수 있는 일반적인 프로그램은 GraphViz 이지만 이 형식을 읽을 수 있는 웹 서비스도 있습니다.
Generating Images terraform graph | dot -Tpng &amp;gt; graph.png terraform graph | dot -Tsvg &amp;gt; graph.svg </description>
    </item>
    
    <item>
      <title>import</title>
      <link>/terraform-workshop/basics/terraform/commands/import/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/terraform-workshop/basics/terraform/commands/import/</guid>
      <description>terraform import 명령은 기존 리소스를 Terraform으로 가져 오는 데 사용됩니다.
Usage terraform import [options] ADDRESS ID import 는 ID에서 기존 리소스를 찾아 주어진 ADDRESS에 Terraform 상태로 가져옵니다.
ADDRESS 는 유효한 리소스 주소여야 합니다. 모든 자원 주소가 유효하기 때문에 import 명령은 자원을 모듈로 가져 오거나 상태의 루트로 직접 가져올 수 있습니다.
ID 는 가져 오는 자원 유형에 따라 다릅니다. 예를 들어 AWS 인스턴스의 경우 인스턴스 ID (i-abcd1234)이지만 AWS Route53 영역의 경우 영역 ID (Z12ABC4UGMOZ2N)입니다.</description>
    </item>
    
    <item>
      <title>init</title>
      <link>/terraform-workshop/basics/terraform/commands/init/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/terraform-workshop/basics/terraform/commands/init/</guid>
      <description>terraform init 명령은 Terraform 구성 파일이 포함 된 작업 디렉토리를 초기화하는 데 사용됩니다. 새 Terraform 구성을 작성하거나 기존 버전 구성을 버전 제어에서 복제 한 후에 실행해야하는 첫 번째 명령입니다. 이 명령을 여러번 실행하는 것이 안전합니다.
Usage terraform init [options] [DIR] </description>
    </item>
    
    <item>
      <title>output</title>
      <link>/terraform-workshop/basics/terraform/commands/output/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/terraform-workshop/basics/terraform/commands/output/</guid>
      <description>terraform output 명령은 상태 파일에서 출력 변수의 값을 추출하는 데 사용됩니다.
Usage terraform output [options] [NAME] 주요 옵션:
-json - 지정된 경우 출력은 출력 당 키를 사용하여 JSON 오브젝트로 형식화됩니다. NAME을 지정하면 지정된 출력 만 반환됩니다. 추가 처리를 위해 jq와 같은 도구에 파이프로 연결할 수 있습니다.</description>
    </item>
    
    <item>
      <title>plan</title>
      <link>/terraform-workshop/basics/terraform/commands/plan/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/terraform-workshop/basics/terraform/commands/plan/</guid>
      <description>terraform plan 명령은 실행 계획을 작성하는 데 사용됩니다. Terraform은 명시 적으로 비활성화되지 않은 경우 새로 고침을 수행 한 다음 구성 파일에 지정된 원하는 상태를 달성하는 데 필요한 작업을 결정합니다.
이 명령은 실제 자원이나 상태를 변경하지 않고 일련의 변경에 대한 실행 계획이 예상과 일치하는지 확인하는 편리한 방법입니다. 예를 들어, 버전 제어에 대한 변경 사항을 commit 하기 전에 테라 폼 계획을 실행하여 예상대로 작동 함을 확신 할 수 있습니다.
Usage terraform plan [options] [dir] 주요 옵션:</description>
    </item>
    
    <item>
      <title>providers</title>
      <link>/terraform-workshop/basics/terraform/commands/providers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/terraform-workshop/basics/terraform/commands/providers/</guid>
      <description>terraform provider 명령은 현재 구성에 사용 된 제공자에 대한 정보를 출력합니다.
Usage terraform providers [config-path] 예시:
. ├── provider.aws ├── provider.terraform └── module.eks ├── provider.aws (inherited) ├── provider.kubernetes ├── provider.local └── provider.template </description>
    </item>
    
    <item>
      <title>state</title>
      <link>/terraform-workshop/basics/terraform/commands/state/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/terraform-workshop/basics/terraform/commands/state/</guid>
      <description>terraform state 명령은 고급 상태 관리에 사용됩니다. Terraform 사용이 향상됨에 따라 Terraform 상태를 수정해야하는 경우가 있습니다. 상태를 직접 수정하는 대신 terraform state 명령을 사용할 수 있습니다.
이 명령은 중첩 된 하위 명령이며 추가 하위 명령이 있습니다.
Usage terraform state &amp;lt;subcommand&amp;gt; [options] [args] subcommands  list mv pull push rm show  Remote State Terraform state 부속 명령은 모두 마치 로컬 상태 인 것처럼 원격 상태에서 작동합니다. 각 읽기 및 쓰기가 전체 네트워크 왕복을 수행하므로 읽기 및 쓰기가 평소보다 오래 걸릴 수 있습니다.</description>
    </item>
    
  </channel>
</rss>