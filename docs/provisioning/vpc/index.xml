<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>VPC on Terraform Workshop</title>
    <link>/terraform-workshop/provisioning/vpc/</link>
    <description>Recent content in VPC on Terraform Workshop</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-KR</language>
    
	<atom:link href="/terraform-workshop/provisioning/vpc/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>variable.tf</title>
      <link>/terraform-workshop/provisioning/vpc/variable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/terraform-workshop/provisioning/vpc/variable/</guid>
      <description>VPC 를 생성하기 위해 variable 을 만들어 둡니다.
variable &amp;#34;region&amp;#34; { description = &amp;#34;생성될 리전을 입력 합니다.&amp;#34; type = string default = &amp;#34;ap-northeast-2&amp;#34; } variable &amp;#34;name&amp;#34; { description = &amp;#34;VPC 이름을 입력합니다.&amp;#34; type = string default = &amp;#34;workshop&amp;#34; } variable &amp;#34;vpc_cidr&amp;#34; { description = &amp;#34;VPC 사이더를 입력합니다.&amp;#34; type = string default = &amp;#34;10.15.0.0/16&amp;#34; } variable &amp;#34;public_subnets&amp;#34; { description = &amp;#34;생성될 공개 서브넷 목록을 입력합니다.&amp;#34; type = list(object({ zone = string cidr = string })) default = [ { zone = &amp;#34;ap-northeast-2a&amp;#34; cidr = &amp;#34;10.</description>
    </item>
    
    <item>
      <title>backend.tf</title>
      <link>/terraform-workshop/provisioning/vpc/backend/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/terraform-workshop/provisioning/vpc/backend/</guid>
      <description>State 정보를 저장하기 위해 backend 설정을 해줍니다.
Provider 는 AWS 를 사용 합니다.
terraform { backend &amp;#34;s3&amp;#34; { region = &amp;#34;ap-northeast-2&amp;#34; bucket = &amp;#34;terraform-workshop-seoul&amp;#34; key = &amp;#34;vpc-demo.tfstate&amp;#34; dynamodb_table = &amp;#34;terraform-workshop-seoul&amp;#34; encrypt = true } } provider &amp;#34;aws&amp;#34; { region = var.region } </description>
    </item>
    
    <item>
      <title>vpc.tf</title>
      <link>/terraform-workshop/provisioning/vpc/vpc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/terraform-workshop/provisioning/vpc/vpc/</guid>
      <description>resource &amp;#34;aws_vpc&amp;#34; &amp;#34;this&amp;#34; { cidr_block = var.vpc_cidr tags = { Name = format(&amp;#34;%s&amp;#34;, var.name) } } resource &amp;#34;aws_internet_gateway&amp;#34; &amp;#34;this&amp;#34; { vpc_id = aws_vpc.this.id tags = { Name = format(&amp;#34;%s&amp;#34;, var.name) } } </description>
    </item>
    
    <item>
      <title>public-route.tf</title>
      <link>/terraform-workshop/provisioning/vpc/public-route/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/terraform-workshop/provisioning/vpc/public-route/</guid>
      <description>resource &amp;#34;aws_route_table&amp;#34; &amp;#34;public&amp;#34; { count = length(var.public_subnets) vpc_id = aws_vpc.this.id tags = { Name = format(&amp;#34;%s-public-%s&amp;#34;, var.name, count.index) } } resource &amp;#34;aws_route&amp;#34; &amp;#34;public&amp;#34; { count = length(var.public_subnets) route_table_id = aws_route_table.public[count.index].id destination_cidr_block = &amp;#34;0.0.0.0/0&amp;#34; gateway_id = aws_internet_gateway.this.id timeouts { create = &amp;#34;5m&amp;#34; } } </description>
    </item>
    
    <item>
      <title>public-subnet.tf</title>
      <link>/terraform-workshop/provisioning/vpc/public-subnet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/terraform-workshop/provisioning/vpc/public-subnet/</guid>
      <description>resource &amp;#34;aws_subnet&amp;#34; &amp;#34;public&amp;#34; { count = length(var.public_subnets) vpc_id = aws_vpc.this.id availability_zone = var.public_subnets[count.index].zone cidr_block = var.public_subnets[count.index].cidr tags = { Name = format(&amp;#34;%s-public-%s&amp;#34;, var.name, count.index) } } resource &amp;#34;aws_route_table_association&amp;#34; &amp;#34;public&amp;#34; { count = length(var.public_subnets) subnet_id = aws_subnet.public[count.index].id route_table_id = aws_route_table.public[count.index].id } </description>
    </item>
    
    <item>
      <title>nat-gatweway.tf</title>
      <link>/terraform-workshop/provisioning/vpc/nat-gatweway/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/terraform-workshop/provisioning/vpc/nat-gatweway/</guid>
      <description>resource &amp;#34;aws_eip&amp;#34; &amp;#34;private&amp;#34; { vpc = true depends_on = [aws_route_table.public] tags = { Name = format(&amp;#34;%s-private&amp;#34;, var.name) } } resource &amp;#34;aws_nat_gateway&amp;#34; &amp;#34;private&amp;#34; { allocation_id = aws_eip.private.id subnet_id = aws_subnet.public[0].id tags = { Name = format(&amp;#34;%s-private&amp;#34;, var.name) } } </description>
    </item>
    
    <item>
      <title>private-route.tf</title>
      <link>/terraform-workshop/provisioning/vpc/private-route/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/terraform-workshop/provisioning/vpc/private-route/</guid>
      <description>resource &amp;#34;aws_route_table&amp;#34; &amp;#34;private&amp;#34; { count = length(var.private_subnets) vpc_id = aws_vpc.this.id lifecycle { ignore_changes = [propagating_vgws] } tags = { Name = format(&amp;#34;%s-private-%s&amp;#34;, var.name, count.index) } } resource &amp;#34;aws_route&amp;#34; &amp;#34;private&amp;#34; { count = length(var.private_subnets) route_table_id = aws_route_table.private[count.index].id destination_cidr_block = &amp;#34;0.0.0.0/0&amp;#34; nat_gateway_id = aws_nat_gateway.private.id timeouts { create = &amp;#34;5m&amp;#34; } } </description>
    </item>
    
    <item>
      <title>private-subnet.tf</title>
      <link>/terraform-workshop/provisioning/vpc/private-subnet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/terraform-workshop/provisioning/vpc/private-subnet/</guid>
      <description>resource &amp;#34;aws_subnet&amp;#34; &amp;#34;private&amp;#34; { count = length(var.private_subnets) vpc_id = aws_vpc.this.id availability_zone = var.private_subnets[count.index].zone cidr_block = var.private_subnets[count.index].cidr tags = { Name = format(&amp;#34;%s-private-%s&amp;#34;, var.name, count.index) } } resource &amp;#34;aws_route_table_association&amp;#34; &amp;#34;private&amp;#34; { count = length(var.private_subnets) subnet_id = aws_subnet.private[count.index].id route_table_id = aws_route_table.private[count.index].id } </description>
    </item>
    
    <item>
      <title>output.tf</title>
      <link>/terraform-workshop/provisioning/vpc/output/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/terraform-workshop/provisioning/vpc/output/</guid>
      <description>결과를 출력 합니다.
output &amp;#34;vpc_id&amp;#34; { value = aws_vpc.this.id } output &amp;#34;public_subnet_ids&amp;#34; { value = aws_subnet.public.*.id } output &amp;#34;private_subnet_ids&amp;#34; { value = aws_subnet.private.*.id } output &amp;#34;nat_gateway_ip&amp;#34; { value = aws_eip.private.public_ip } </description>
    </item>
    
    <item>
      <title>result</title>
      <link>/terraform-workshop/provisioning/vpc/result/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/terraform-workshop/provisioning/vpc/result/</guid>
      <description>Terraform 명령으로 생성 합니다.
terraform init terraform plan terraform apply 다음과 같은 메세지가 출력 되면 성공 입니다.
Apply complete! Resources: x added, 0 changed, 0 destroyed. Outputs: nat_gateway_ip = [ &amp;#34;52.78.13.15&amp;#34;, ] private_subnet_ids = [ &amp;#34;subnet-034abbc6xc10634ad&amp;#34;, &amp;#34;subnet-0944x61ec8c2f8f93&amp;#34;, &amp;#34;subnet-06b7d51d44537x626&amp;#34;, ] public_subnet_ids = [ &amp;#34;subnet-092938d936610xbfe&amp;#34;, &amp;#34;subnet-026b23axc4b257e42&amp;#34;, &amp;#34;subnet-0xfe713b44d028898&amp;#34;, ] vpc_id = &amp;#34;vpc-0fxb2037axdc5b059&amp;#34; </description>
    </item>
    
  </channel>
</rss>